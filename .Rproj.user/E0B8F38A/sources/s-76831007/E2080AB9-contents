---
title: "p-value check"
description: |
  Compare reported p-value with distribution of possible p-values.
date: "`r Sys.Date()`"
output: distill::distill_article
params: 
  amu: 1
  bmu: 1
  asigma: 0.2
  bsigma: 0.5
  an: 35
  bn: 50
  trials: 120 
  reportedp: 0.02
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r packages}
library(tidyverse)
library(gt)
library(ggthemes)
library(glue)

```


Suppose we have a study that has reported a p-value of `r params$repoortedp` for a t-test between groups A and B with the following means, standard deviations, and sample sizes. 

```{r group stats}
dat <- 
  tibble(
    group = c("A", "B"),
    mean = c(params$amu, params$bmu),
    sd = c(params$asigma, params$bsigma),
    n = c(params$an, params$bn)
  )

```

```{r group stats table}
dat %>% 
  gt()

```

```{r}
dnorm(0.5, mean = c(0, 1), sd = c(1, 2))
pnorm(0.5, 0, 1)

```


```{r}
ggplot() +
  stat_function(
    fun = dnorm,
    args = list(mean = params$amu, sd = params$asigma),
    alpha = 0.5
  ) +
  stat_function(
    fun = dnorm,
    args = list(mean = params$bmu, sd = params$bsigma),
    alpha = 0.5
  ) +
  geom_text(
    aes(x = x, y = y, label = label),
    data = tibble(
    x = c(params$amu, params$bmu),
    y = dnorm(c(params$amu, params$bmu), mean = c(params$amu, params$bmu), sd = c(params$asigma, params$bsigma)) + 0.1,
    label = c("A", "B")),
    alpha = 0.3) +
  theme_tufte() +
  theme(
    axis.line.y = element_blank(),
    axis.ticks.y = element_blank(),
    axis.text.y = element_blank(),
    axis.title.y = element_blank()
  ) +
  xlim(min(c(params$amu, params$bmu)) - 3 * max(c(params$asigma, params$bsigma)),
       max(c(params$amu, params$bmu)) + 3 * max(c(params$asigma, params$bsigma)))

```


Now we wish to write a simulation that draws a samples from each distribution of `r dat$n`, respectively, and computes a t-test, producing a p-value.

```{r}
sample_a <- rnorm(params$an, mean = params$amu, sd = params$asigma)
sample_b <- rnorm(params$bn, mean = params$bmu, sd = params$bsigma)

sample_a %>% head()
sample_b %>% head()

ttest <- t.test(sample_a, sample_b)

ttest

# extract the p value
ttest$p.value


```

Now let's turn this into a fucntion.

```{r}
ptrial <- function(
  sim_id,
  amu = params$amu,
  bmu = params$bmu,
  asigma = params$asigma,
  bsigma = params$bsigma,
  an = params$an,
  bn = params$bn
){
  # get samples
  sample_a <- rnorm(n = an, mean = amu, sd = asigma)
  sample_b <- rnorm(n = bn, mean = bmu, sd = bsigma)
  
  # calculate t-test
  ttest <- t.test(sample_a, sample_b)
  
  # return pvalue
  return(
    tibble(
      id = sim_id,
      p_value = ttest$p.value
    )
  )
}

ptrial(1)
```

Now that we have a function, we can perform `r params$trials` trials.

```{r}
trials <- 
1:params$trials %>% 
  map_df(ptrial)

trials %>% head() %>%  gt()
```

Now we plot the distribution of p-values.

```{r}

reported_quant <- ecdf(trials$p_value)(params$reportedp)

shown_p <- params$reportedp + params$reportedp/2

shown_percent <- ecdf(trials$p_value)(shown_p) %>% round(2) * 2

trials %>% 
  ggplot(aes(x = p_value)) +
  geom_density() +
  theme_tufte() +
    theme(
    axis.line.y = element_blank(),
    axis.ticks.y = element_blank(),
    axis.text.y = element_blank(),
    axis.title.y = element_blank()
  ) +
  geom_vline(
    xintercept = params$reportedp,
    linetype = "dotted"
  ) +
  annotate(
      "rect",
      xmin = params$reportedp,
      xmax = Inf,
      ymin = 0,
      ymax = Inf,
    alpha = 0.1
    ) +
  labs(
    title = str_wrap(glue("Distribution of lower {shown_percent} per cent of p-values generated by {params$trials} t-tests of random samples drawn from distributions of groups")),
    subtitle = str_wrap(glue("{(1 - round(reported_quant, 2)) * 100} per cent of p-values are greater (shaded region) than reported p-value {params$reportedp}")),
    x = "p value",
    caption = "Reported p-value indicated by vertical dotted line"
  ) +
  xlim(0, shown_p)


```

